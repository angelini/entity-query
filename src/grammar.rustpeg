use ast::{ASTNode, Comparator};

#[pub]
ast -> ASTNode
  = __ e1:expr __ " | " __ e2:ast __ { ASTNode::Or(Box::new(e1), Box::new(e2)) }
  / __ e:expr __ { e }
  / __ { ASTNode::True }

expr -> ASTNode
  = p:preds { ASTNode::from_parser(p) }

preds -> Vec<(String, String, Option<ASTNode>, Comparator)>
  = p:pred ++ __ { p }

pred -> (String, String, Option<ASTNode>, Comparator)
  = "e:(" q:ast ")" { ("e".to_owned(), "".to_owned(), Some(q), Comparator::Contains) }
  / n:pred_name "=" v:pred_val { (n, v, None, Comparator::Equal) }
  / n:pred_name ">" v:pred_val { (n, v, None, Comparator::Greater) }
  / n:pred_name ">=" v:pred_val { (n, v, None, Comparator::GreaterOrEqual) }
  / n:pred_name "<" v:pred_val { (n, v, None, Comparator::Less) }
  / n:pred_name "<=" v:pred_val { (n, v, None, Comparator::LessOrEqual) }
  / n:pred_name ":" v:pred_val { (n, v, None, Comparator::Contains) }

pred_name -> String
  = [eavt] { match_str.to_owned() }

pred_val -> String
  = [\"'] [a-zA-Z0-9_/ ]+ [\"'] { match_str.trim_matches(|c| c == '\'' || c == '"').to_owned() }
  / [a-zA-Z0-9_/]+ { match_str.to_owned() }

__ = " "*
